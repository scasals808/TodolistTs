{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","itemName","setItemName","error","setError","addItemLocal","trim","addItem","TextField","size","variant","value","onChange","event","currentTarget","onKeyPress","key","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","title","setTitle","onBlur","saveNewTitle","autoFocus","onDoubleClick","Todolist","newTitle","changeTodoListTitle","id","removeTodoList","Delete","addTask","tasks","map","task","className","isDone","Checkbox","checked","newCheckBoxValue","changeTaskStatus","changeTaskTitle","removeTask","Button","filter","changeTodolistFilter","App","todoListID1","v1","todoListID2","todoLists","setTodoLists","setTasks","taskId","todoListID","todoListTasks","find","t","todoList","newTaskName","newTask","newFilterValue","tl","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","newTodoListID","newTodoList","spacing","tasksForTodolist","item","Paper","elevation","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.75785444.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {AddBox} from \"@material-ui/icons\";\n\ntype PropsType = {\n    addItem: (title: string) => void\n}\n\nexport function AddItemForm(props: PropsType) {\n    let [itemName, setItemName] = useState<string>('')\n    let [error, setError] = useState<string | null>(null)\n\n    function onItemNameChanged(event: ChangeEvent<HTMLInputElement>) {\n        setItemName(event.currentTarget.value);\n        setError(null);\n    }\n\n    function onAddItemKeyPressed(event: KeyboardEvent<HTMLInputElement>) {\n        if (event.key === 'Enter') {\n            addItemLocal()\n        }\n    }\n\n    function addItemLocal() {\n        if (itemName.trim() !== '') {\n            props.addItem(itemName.trim());\n            setItemName('');\n        } else {\n            setError('Title is required!');\n        }\n    }\n\n    return (\n        <div>\n            <TextField size={\"small\"}\n                variant={'outlined'}\n                value={itemName}\n                onChange={onItemNameChanged}\n                onKeyPress={onAddItemKeyPressed}\n                error={!!error} //! - преобразование в булевый тип, !! - приведение в противоположный, className={error ? 'error' : ''}\n                label={'Title'}\n                helperText={error} //{error && <div className={'error_message'}>{error}</div>}\n            />\n            <IconButton color={\"primary\"} onClick={addItemLocal}>\n                <AddBox />\n            </IconButton>\n        </div>\n    )\n}\n","import React, {ChangeEvent, useState} from \"react\";\nimport {TextField} from \"@material-ui/core\";\n\ntype PropsType = {\n    title: string\n    saveNewTitle: (newTitle: string) => void\n}\n\nexport function EditableSpan(props: PropsType) {\n    let [editMode, setEditMode] = useState<boolean>(false)\n    let [title, setTitle] = useState<string>(props.title)\n\n\n    function activatedEditMode() {\n        setEditMode(true)\n        setTitle(props.title)\n    }\n\n    function deActivatedEditMode() {\n        debugger;\n        setEditMode(false)\n        props.saveNewTitle(title)\n    }\n\n    function changeTitle(event: ChangeEvent<HTMLInputElement>) {\n        setTitle(event.currentTarget.value);\n    }\n\n    return editMode\n        ? <TextField\n            variant={'outlined'}\n            value={title}\n            onBlur={deActivatedEditMode}\n            autoFocus={true}\n            onChange={changeTitle}\n        />\n        : <span onDoubleClick={activatedEditMode}>{props.title}</span>\n}","import React, {useState, ChangeEvent, KeyboardEvent} from 'react';\r\nimport {TaskType, FilterValuesType} from './App';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\n\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskID: string, todoListID: string) => void\r\n    changeTodolistFilter: (newFilterValue: FilterValuesType, todoListID: string) => void\r\n    addTask: (newTaskName: string, todoListID: string) => void\r\n    changeTaskStatus: (taskID: string, isDone: boolean, todoListID: string) => void\r\n    changeTaskTitle: (taskID: string, newTitle: string, todoListID: string) => void\r\n    changeTodoListTitle: (taskID: string, newTitle: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n    function onAllClickHandler() {\r\n        props.changeTodolistFilter('all', props.id)\r\n    }\r\n\r\n    function onActiveClickHandler() {\r\n        props.changeTodolistFilter('active', props.id)\r\n    }\r\n\r\n    function onCompletedClickHandler() {\r\n        props.changeTodolistFilter('completed', props.id)\r\n    }\r\n\r\n    function onClickRemoveTodoList() {\r\n        props.removeTodoList(props.id)\r\n    }\r\n\r\n    function addTask(title: string) {\r\n        props.addTask(title, props.id)\r\n    }\r\n\r\n    function changeTodoListTitle(newTitle: string) {\r\n        props.changeTodoListTitle(props.id, newTitle)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan title={props.title} saveNewTitle={changeTodoListTitle}/>\r\n            <IconButton onClick={onClickRemoveTodoList}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {props.tasks.map((task) => {\r\n                let removeTask = () => {\r\n                    props.removeTask(task.id, props.id)\r\n                };\r\n                let changeStatus = (event: ChangeEvent<HTMLInputElement>) => {\r\n                    let newCheckBoxValue = event.currentTarget.checked\r\n                    props.changeTaskStatus(task.id, newCheckBoxValue, props.id)\r\n                };\r\n                let changeTaskTitle = (newTitle: string) => {\r\n                    props.changeTaskTitle(task.id, newTitle, props.id)\r\n                }\r\n\r\n                return (\r\n                    <div key={task.id} className={task.isDone ? 'is_done' : ''}>\r\n                        <Checkbox\r\n                            color={'primary'}\r\n                            checked={task.isDone}\r\n                            onChange={changeStatus}\r\n                        />\r\n                        <EditableSpan title={task.title} saveNewTitle={changeTaskTitle}/>\r\n                        <IconButton onClick={removeTask}>\r\n                            <CancelIcon />\r\n                        </IconButton>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n        <div>\r\n            <Button variant={props.filter === 'all' ? 'contained' : 'outlined'}\r\n                    color={props.filter === 'all' ? 'default' : 'primary'}\r\n                    onClick={onAllClickHandler}>All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'contained' : 'outlined'}\r\n                    color={props.filter === 'active' ? 'default' : 'primary'}\r\n                    onClick={onActiveClickHandler}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'contained' : 'outlined'}\r\n                    color={props.filter === 'completed' ? 'default' : 'primary'}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n    let todoListID1 = v1();\r\n    let todoListID2 = v1();\r\n\r\n    let [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n        {id: todoListID1, title: \"What to learn\", filter: 'all'},\r\n        {id: todoListID2, title: \"What to learn next\", filter: 'active'}\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TaskStateType>({\r\n        [todoListID1]: [ //[имя переменной] используем в качестве свойства обЬекта-передаем переменную по значению\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false}\r\n        ],\r\n        [todoListID2]: [\r\n            {id: v1(), title: \"RestApi\", isDone: false},\r\n            {id: v1(), title: \"GraphQL\", isDone: false},\r\n            {id: v1(), title: \"SASS\", isDone: false}\r\n        ]\r\n    });\r\n\r\n    function removeTask(taskId: string, todoListID: string) {\r\n        let todoListTasks = tasks[todoListID];\r\n        tasks[todoListID] = todoListTasks.filter(task => task.id !== taskId)\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function changeTaskStatus(id: string, isDone: boolean, todoListID: string) {\r\n        let todoListTasks = tasks[todoListID];\r\n        let task = todoListTasks.find(t => t.id === id);\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n\r\n    function changeTaskTitle(id: string, newTitle: string, todoListID: string) {\r\n        let todoListTasks = tasks[todoListID];\r\n        let task = todoListTasks.find(t => t.id === id);\r\n        if (task) {\r\n            task.title = newTitle;\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n\r\n    function changeTodoListTitle(id: string, newTitle: string) {\r\n        let todoList = todoLists.find(t => t.id === id)\r\n        if (todoList) {\r\n            todoList.title = newTitle\r\n            setTodoLists([...todoLists])\r\n            //сетаем в стейт копию массива чтобы реакт отреагировал перерисовкой, если засетать не копию перерисовки не будет\r\n        }\r\n    }\r\n\r\n    function addTask(newTaskName: string, todoListID: string) {\r\n        let newTask = {id: v1(), title: newTaskName, isDone: false}\r\n        let todoListTasks = tasks[todoListID];\r\n        tasks[todoListID] = [newTask, ...todoListTasks]\r\n        setTasks({...tasks})//перерисовка\r\n    }\r\n\r\n    function changeTodolistFilter(newFilterValue: FilterValuesType, todoListID: string) {\r\n        let todoList = todoLists.find(tl => tl.id === todoListID)\r\n        if (todoList) {\r\n            todoList.filter = newFilterValue\r\n            setTodoLists([...todoLists])\r\n        }\r\n    }\r\n\r\n    function removeTodoList(todoListID: string) {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListID))\r\n        delete tasks[todoListID]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function addTodoList(title: string) {\r\n        let newTodoListID = v1()\r\n        let newTodoList: TodoListType = {\r\n            id: newTodoListID,\r\n            title: title,\r\n            filter: \"all\"\r\n        }\r\n        setTodoLists([...todoLists, newTodoList])\r\n        setTasks({\r\n            ...tasks, [newTodoListID]: [],\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px'}}><AddItemForm addItem={addTodoList}/></Grid>\r\n                <Grid container spacing={5}>{\r\n                    todoLists.map(tl => {\r\n                        let tasksForTodolist = tasks[tl.id]\r\n                        if (tl.filter === 'active') {\r\n                            tasksForTodolist = tasks[tl.id].filter(task => !task.isDone)\r\n                        }\r\n                        if (tl.filter === 'completed') {\r\n                            tasksForTodolist = tasks[tl.id].filter(task => task.isDone)\r\n                        }\r\n                        return (\r\n                            <Grid item>\r\n                                <Paper style={{padding: '20px'}} elevation={6}>\r\n                                    <Todolist\r\n                                        key={tl.id}\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        filter={tl.filter}\r\n                                        tasks={tasksForTodolist}\r\n                                        removeTask={removeTask}\r\n                                        changeTodolistFilter={changeTodolistFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeTaskStatus}\r\n                                        changeTodoListTitle={changeTodoListTitle}\r\n                                        removeTodoList={removeTodoList}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        )\r\n                    })\r\n                }</Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}