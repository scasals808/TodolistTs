{"version":3,"sources":["api/todolist-api.ts","AddItemForm.tsx","EditableSpan.tsx","state/tasks-reducer.ts","Task.tsx","Todolist.tsx","state/todolists-reducer.ts","AppWithRedux.tsx","serviceWorker.ts","state/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","useState","itemName","setItemName","error","setError","addItemLocal","trim","addItem","todoId","TextField","size","variant","value","onChange","event","currentTarget","onKeyPress","key","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","console","log","editMode","setEditMode","title","setTitle","onBlur","saveNewTitle","autoFocus","onDoubleClick","instance","axios","create","withCredentials","baseURL","headers","todoListAPI","get","post","delete","put","taskId","model","InitialState","updateTaskTC","domainModel","dispatch","getState","task","tasks","find","el","id","apiModel","startDate","priority","description","deadline","status","then","todolistId","type","updateTaskAC","warn","Task","todoListId","changeTaskTitle","useCallback","className","Completed","Checkbox","checked","changeStatus","New","removeTask","Todolist","useEffect","todolist","res","data","items","setTaskAC","useSelector","state","useDispatch","allTodoListTasks","tasksForTodolist","filter","onAllClickHandler","changeTodolistFilter","onActiveClickHandler","onCompletedClickHandler","removeTaskAC","removeTaskTC","changeTodoListTitle","newTitle","addTask","item","addTaskTC","removeTodoList","Delete","map","index","Button","AppWithRedux","todos","todoLists","todoListID","newFilterValue","addTodoList","newTodolistTitle","todo","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","spacing","tl","Paper","elevation","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","newTodo","newTodoList","newTaskArray","t","stateCopy","forEach","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.db38071f.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport type TodoListType = {\n    id: string\n    title: string\n    addedDate: string\n    order: number\n}\n\nexport type UpdateTaskModelType = {\n    title: string\n    description: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n}\n\nexport enum TaskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3\n}\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n}\n\nexport type TaskType = {\n    description: string\n    title: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n}\n\ntype GetTaskResponse = {\n    error: string | null\n    totalCount: number\n    items: TaskType[]\n}\n\ntype CommonResponseType<T = {}> = {\n    resultCode: number\n    messages: Array<string>\n    data: T\n}\n\nconst instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    headers: {\n        'API-KEY': '0bbbf023-77a9-44fe-841d-51e508b8f676'\n    }\n})\n\nexport const todoListAPI = {\n    getTodoLists() {\n        return instance.get<Array<TodoListType>>(`todo-lists`)\n    },\n    createTodo(title: string) {\n        return instance.post<CommonResponseType<{ item: TodoListType }>>(`todo-lists`, {title})\n    },\n    deleteTodo(todoId: string) {\n        return instance.delete<CommonResponseType>(`todo-lists/${todoId}`)\n    },\n    updateTodo(todoId: string, title: string = '') {\n        return instance.put<CommonResponseType>(`todo-lists/${todoId}`, {title})\n    },\n    getTask(todoId: string) {\n        return instance.get<GetTaskResponse>(`todo-lists/${todoId}/tasks`)\n    },\n    createTask(todoId: string, title: string = 'new task') {\n        return instance.post<CommonResponseType<{ item: TaskType }>>(`todo-lists/${todoId}/tasks`, {title})\n    },\n    deleteTask(todoId: string, taskId: string) {\n        return instance.delete<CommonResponseType>(`todo-lists/${todoId}/tasks/${taskId}`)\n    },\n    updateTask(todoId: string, taskId: string, model: UpdateTaskModelType) {\n        return instance.put<CommonResponseType>(`todo-lists/${todoId}/tasks/${taskId}`, model)\n    }\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {AddBox} from \"@material-ui/icons\";\n\ntype PropsType = {\n    todoId: string\n    addItem: (title: string, todoId: string) => void\n}\n\nexport const AddItemForm = React.memo((props: PropsType) => {\n    let [itemName, setItemName] = useState<string>('')\n    let [error, setError] = useState<string | null>(null)\n\n    function onItemNameChanged(event: ChangeEvent<HTMLInputElement>) {\n        setItemName(event.currentTarget.value);\n        setError(null);\n    }\n\n    function onAddItemKeyPressed(event: KeyboardEvent<HTMLInputElement>) {\n        if (error !== null) setError(null)\n        if (event.key === 'Enter') {\n            addItemLocal()\n        }\n    }\n\n    function addItemLocal() {\n        if (itemName.trim() !== '') {\n            props.addItem(itemName.trim(), props.todoId);\n            setItemName('');\n        } else {\n            setError('Title is required!');\n        }\n    }\n\n    return (\n        <div>\n            <TextField size={\"small\"}\n                       variant={'outlined'}\n                       value={itemName}\n                       onChange={onItemNameChanged}\n                       onKeyPress={onAddItemKeyPressed}\n                       error={!!error} //! - преобразование в булевый тип, !! - приведение в противоположный, className={error ? 'error' : ''}\n                       label={'Title'}\n                       helperText={error} //{error && <div className={'error_message'}>{error}</div>}\n            />\n            <IconButton color={\"primary\"} onClick={addItemLocal}>\n                <AddBox/>\n            </IconButton>\n        </div>\n    )\n})\n","import React, {ChangeEvent, useState} from \"react\";\nimport {TextField} from \"@material-ui/core\";\n\ntype PropsType = {\n    title: string\n    saveNewTitle: (newTitle: string) => void\n}\n\nexport const EditableSpan = React.memo((props: PropsType) => {\n    console.log('span')\n    let [editMode, setEditMode] = useState<boolean>(false)\n    let [title, setTitle] = useState<string>(props.title)\n\n    function activatedEditMode() {\n        setEditMode(true)\n        setTitle(props.title)\n    }\n\n    function deActivatedEditMode() {\n        setEditMode(false)\n        props.saveNewTitle(title)\n    }\n\n    function changeTitle(event: ChangeEvent<HTMLInputElement>) {\n        setTitle(event.currentTarget.value);\n    }\n\n    return editMode\n        ? <TextField\n            variant={'outlined'}\n            value={title}\n            onBlur={deActivatedEditMode}\n            autoFocus={true}\n            onChange={changeTitle}\n        />\n        : <span onDoubleClick={activatedEditMode}>{props.title}</span>\n})","import {TaskStateType} from \"../AppWithRedux\";\nimport {AddTodolistActionType, RemoveTodolistActionType, SetTodoListsActionType} from \"./todolists-reducer\";\nimport {TaskPriorities, TaskStatuses, TaskType, todoListAPI, UpdateTaskModelType} from \"../api/todolist-api\";\nimport {Dispatch} from \"redux\";\nimport {AppRootStateType} from \"./store\";\n\nconst REMOVE_TASK = 'REMOVE_TASK'\nconst ADD_TASK = 'ADD_TASK'\nconst UPDATE_TASK = 'UPDATE_TASK'\nconst REMOVE_TODOLIST = 'REMOVE_TODOLIST'\nconst ADD_TODOLIST = 'ADD_TODOLIST'\nconst SET_TASKS = 'SET_TASKS'\n\ntype RemoveTaskActionType = {\n    type: 'REMOVE_TASK'\n    taskId: string\n    todolistId: string\n}\n\ntype AddTaskActionType = {\n    type: 'ADD_TASK'\n    task: TaskType\n}\n\ntype UpdateTaskActionType = {\n    type: 'UPDATE_TASK'\n    taskId: string\n    model: UpdateDomainTaskModelType\n    todolistId: string\n}\n\n// type ChangeTaskTitleActionType = {\n//     type: 'CHANGE_TASK_TITLE',\n//     taskId: string\n//     title: string,\n//     todolistId: string\n// }\n\ntype  SetTaskActionType = {\n    type: 'SET_TASKS'\n    tasks: Array<TaskType>\n    todolistId: string\n}\n\ntype ActionsTypes = RemoveTaskActionType |\n    AddTaskActionType |\n    UpdateTaskActionType |\n    AddTodolistActionType |\n    RemoveTodolistActionType |\n    SetTodoListsActionType |\n    SetTaskActionType\n\nconst InitialState: TaskStateType = {}\n\nexport const tasksReducer = (state: TaskStateType = InitialState, action: ActionsTypes) => {\n    switch (action.type) {\n        case REMOVE_TASK:\n            let newTodoList = [...state[action.todolistId].filter(task => task.id !== action.taskId)]\n            return {...state, [action.todolistId]: newTodoList}\n        case ADD_TASK:\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\n        case UPDATE_TASK: {\n             // state[action.todolistId].map(t => t.id === action.taskId ? {...t, ...action.model} : t)\n            let newTodo = state[action.todolistId]\n            let newTaskArray = newTodo.map(t => t.id === action.taskId ? {...t, ...action.model} : t)\n            state[action.todolistId] = newTaskArray\n            return ({...state})\n        }\n        case ADD_TODOLIST:\n            return {\n                ...state,\n                [action.type]: []\n            }\n        case REMOVE_TODOLIST:\n            let stateCopy = {...state}\n            delete stateCopy[action.id]\n            return stateCopy\n        case 'SET_TODOLISTS': {\n            const stateCopy = {...state}\n            action.todoLists.forEach(tl => {\n                stateCopy[tl.id] = [] // stateCopy -  ассоциативный массив\n            })\n            return stateCopy\n        }\n        case SET_TASKS: {\n            const stateCopy = {...state}\n            stateCopy[action.todolistId] = action.tasks\n            return stateCopy\n        }\n        default:\n            return state\n    }\n}\n\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\n    return {type: 'REMOVE_TASK', taskId, todolistId,}\n}\n\nexport const addTaskAC = (task: TaskType): AddTaskActionType => {\n    return {type: 'ADD_TASK', task}\n}\n\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string): UpdateTaskActionType => {\n    return {type: 'UPDATE_TASK', taskId, model, todolistId}\n}\nexport const setTaskAC = (tasks: Array<TaskType>, todolistId: string): SetTaskActionType => {\n    return {type: 'SET_TASKS', tasks, todolistId}\n}\n\nexport const getTasksTC = (todoId: string) => (dispatch: Dispatch) => {\n    todoListAPI.getTask(todoId)\n        .then((res) => {\n            const tasks = res.data.items\n            dispatch(setTaskAC(tasks, todoId))\n        })\n}\n\nexport const removeTaskTC = (todoId: string, taskId: string) => (dispatch: Dispatch) => {\n    todoListAPI.deleteTask(todoId, taskId)\n        .then(() => {\n            dispatch(removeTaskAC(taskId, todoId))\n        })\n}\n\nexport const addTaskTC = (todoId: string, title: string) => (dispatch: Dispatch) => {\n    todoListAPI.createTask(todoId, title)\n        .then((res) => {\n            dispatch(addTaskAC(res.data.data.item))\n        })\n}\n\nexport type UpdateDomainTaskModelType = {\n    title?: string\n    description?: string\n    status?: TaskStatuses\n    priority?: TaskPriorities\n    startDate?: string\n    deadline?: string\n}\n\nexport const updateTaskTC = (todoId: string, domainModel: UpdateDomainTaskModelType, taskId: string) =>\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\n        const task = getState().tasks[todoId].find(el => el.id === taskId)\n        if( !task) {\n            console.warn('task not found in the state')\n            return\n        }\n\n        const apiModel: UpdateTaskModelType = {\n            title: task.title,\n            startDate: task.startDate,\n            priority: task.priority,\n            description: task.description,\n            deadline: task.deadline,\n            status: task.status,\n            ...domainModel\n        }\n\n        todoListAPI.updateTask(todoId, taskId, apiModel)\n            .then(() => {\n                dispatch(updateTaskAC(taskId, domainModel, todoId))\n            })\n\n    }\n\n\n\n","import React, {ChangeEvent, useCallback} from 'react';\nimport {Checkbox, IconButton} from \"@material-ui/core\";\nimport {EditableSpan} from \"./EditableSpan\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport {TaskStatuses, TaskType} from \"./api/todolist-api\";\n\nexport type TaskPropsType = {\n    task: TaskType\n    changeTaskTitle: (taskId: string, title: string, todoId: string) => void\n    changeStatus: (taskId: string, checked: TaskStatuses, todoId: string) => void\n    removeTask: (todoId: string, taskId: string) => void\n}\n\nexport const Task = React.memo((props: TaskPropsType) => {\n    let {id, title, status, todoListId} = props.task\n    const changeTaskTitle = useCallback((title: string) => {\n        props.changeTaskTitle(id, title, todoListId)\n    }, [props, id])\n    //в параметры коллбека нужно передать булево значение, хотя в типах у нас числа... используем тернарник который сразу резолвится, круто\n    let changeStatus = (event: ChangeEvent<HTMLInputElement>) =>\n        props.changeStatus(id, event.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New, todoListId)\n    let removeTask = () => props.removeTask(todoListId, id)\n\n    return (\n        <div key={id} className={status === TaskStatuses.Completed ? 'is_done' : ''}>\n            <Checkbox\n                color={'primary'}\n                checked={status === TaskStatuses.Completed}\n                onChange={changeStatus}\n            />\n            <EditableSpan title={title} saveNewTitle={changeTaskTitle}/>\n            <IconButton onClick={removeTask}>\n                <CancelIcon/>\n            </IconButton>\n        </div>\n    )\n})","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {\r\n    addTaskTC,\r\n    getTasksTC,\r\n    removeTaskTC,\r\n    updateTaskTC\r\n} from \"./state/tasks-reducer\";\r\nimport {Task} from \"./Task\";\r\nimport {TaskStatuses, TaskType} from \"./api/todolist-api\";\r\nimport {FilterValuesType, TodoListDomainType} from \"./state/todolists-reducer\";\r\n\r\n\r\n\r\ntype PropsType = {\r\n    todolist: TodoListDomainType\r\n    changeTodolistFilter: (todoListID: string, newFilterValue: FilterValuesType) => void\r\n    changeTodoListTitle: (taskID: string, newTitle: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n\r\n    useEffect(() => {\r\n        dispatch(getTasksTC(props.todolist.id))\r\n    }, [])\r\n\r\n    const tasks = useSelector<AppRootStateType, Array<TaskType>>((state) => state.tasks[props.todolist.id])\r\n    const dispatch = useDispatch()\r\n\r\n    let allTodoListTasks = tasks\r\n    let tasksForTodolist = allTodoListTasks\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = allTodoListTasks.filter(task => task.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = allTodoListTasks.filter(task => task.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    const onAllClickHandler = useCallback(() =>\r\n        props.changeTodolistFilter(props.todolist.id, 'all'), [props])\r\n    const onActiveClickHandler = useCallback(() =>\r\n        props.changeTodolistFilter(props.todolist.id, 'active'), [props])\r\n    const onCompletedClickHandler = useCallback(() =>\r\n        props.changeTodolistFilter(props.todolist.id, 'completed'), [props])\r\n\r\n    function onClickRemoveTodoList() {\r\n        props.removeTodoList(props.todolist.id)\r\n    }\r\n\r\n    const removeTask = useCallback((todoId: string, taskId: string) => {\r\n        dispatch(removeTaskTC(todoId, taskId))\r\n    }, [])\r\n\r\n    const changeTodoListTitle = useCallback((newTitle: string) => {\r\n        props.changeTodoListTitle(props.todolist.id, newTitle)\r\n    }, [props])\r\n\r\n    const addTask = useCallback(( title: string, todoId: string) => {\r\n        dispatch(addTaskTC(todoId, title))\r\n    }, [])\r\n\r\n    const changeStatus = useCallback((taskId: string, status: TaskStatuses, todoId: string) => {\r\n        dispatch(updateTaskTC(todoId, {status}, taskId ))\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback((taskId: string, newTitle: string, todoId: string) => {\r\n        dispatch(updateTaskTC(todoId, {title: newTitle}, taskId))\r\n    }, [])\r\n\r\n    return <div>\r\n        <h3><EditableSpan title={props.todolist.title} saveNewTitle={changeTodoListTitle}/>\r\n            <IconButton onClick={onClickRemoveTodoList}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} todoId={props.todolist.id}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map((task, index) => {\r\n                    return (<Task\r\n                        key={index}\r\n                        task={task}\r\n                        removeTask={removeTask}\r\n                        changeStatus={changeStatus}\r\n                        changeTaskTitle={changeTaskTitle}/>)\r\n                })}\r\n        </div>\r\n        <div>\r\n            <Button variant={props.todolist.filter === 'all' ? 'contained' : 'outlined'}\r\n                    color={props.todolist.filter === 'all' ? 'default' : 'primary'}\r\n                    onClick={onAllClickHandler}>All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'contained' : 'outlined'}\r\n                    color={props.todolist.filter === 'active' ? 'default' : 'primary'}\r\n                    onClick={onActiveClickHandler}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'contained' : 'outlined'}\r\n                    color={props.todolist.filter === 'completed' ? 'default' : 'primary'}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n","import {todoListAPI, TodoListType} from \"../api/todolist-api\";\nimport {Dispatch} from \"redux\";\n\nconst REMOVE_TODOLIST = 'REMOVE_TODOLIST'\nconst ADD_TODOLIST = 'ADD_TODOLIST'\nconst CHANGE_TODOLIST_TITLE = 'CHANGE_TODOLIST_TITLE'\nconst CHANGE_TODOLIST_FILTER = 'CHANGE_TODOLIST_FILTER'\nconst SET_TODOLISTS = 'SET_TODOLISTS'\n\nexport type RemoveTodolistActionType = {\n    type: 'REMOVE_TODOLIST'\n    id: string\n}\n\nexport type AddTodolistActionType = {\n    type: 'ADD_TODOLIST'\n    todo: TodoListType\n}\n\nexport type ChangeTodolistTitleActionType = {\n    type: 'CHANGE_TODOLIST_TITLE'\n    id: string\n    title: string\n}\n\nexport type ChangeTodolistFilterActionType = {\n    type: 'CHANGE_TODOLIST_FILTER'\n    id: string\n    filter: FilterValuesType\n}\n\nexport type SetTodoListsActionType = {\n    type: 'SET_TODOLISTS'\n    todoLists: Array<TodoListType>\n}\n\ntype ActionsTypes =\n    RemoveTodolistActionType\n    | AddTodolistActionType\n    | ChangeTodolistTitleActionType\n    | ChangeTodolistFilterActionType\n    | SetTodoListsActionType\n\n\nconst InitialState: Array<TodoListDomainType> = []\n\nexport type FilterValuesType = 'all' | 'active' | 'completed';\n\nexport type TodoListDomainType = TodoListType & {\n    filter: FilterValuesType\n}\n\nexport const todoListsReducer = (state: Array<TodoListDomainType> = InitialState, action: ActionsTypes): Array<TodoListDomainType> => {\n    switch (action.type) {\n        case REMOVE_TODOLIST:\n            return state.filter(todo => todo.id !== action.id)\n        //не используем спред ...state т.к. метод .фильтр создает новый массив(не мутирует старый)\n        case ADD_TODOLIST: {\n            // return [{\n            //     id: action.todo.id,\n            //     filter: 'all',\n            //     title: action.todo.title,\n            //     addedDate: '',\n            //     order: 0\n            // }, ...state]\n            const newTodo: TodoListDomainType = {...action.todo, filter: 'all'}\n            return [newTodo, ...state]\n        }\n        case CHANGE_TODOLIST_TITLE:\n            // const newTodoListTitle = state.find(todo => todo.id === action.id)\n            // if (newTodoListTitle) {\n            //     newTodoListTitle.title = action.title\n            // }\n            // return ([...state])\n            return state.map(todo => todo.id === action.id ? {...todo, title: action.title} : todo)\n        case CHANGE_TODOLIST_FILTER:\n            return state.map(todo => todo.id === action.id ? {...todo, filter: action.filter} : todo)\n        case SET_TODOLISTS:\n            return action.todoLists.map(todo => ({ // добавляем фиьтер кв каждый тудулист\n                ...todo,\n                    filter: 'all'\n            }))\n        default:\n            return state\n    }\n}\n\nexport const removeTodoListAC = (todoListId: string): RemoveTodolistActionType => {\n    return {type: 'REMOVE_TODOLIST', id: todoListId}\n}\n\nexport const addTodoListAC = (todo: TodoListType): AddTodolistActionType => {\n    return {type: 'ADD_TODOLIST', todo}\n}\n\nexport const changeTodolistTitleAC = (todoListId: string, newTodolistTitle: string): ChangeTodolistTitleActionType => {\n    return {type: 'CHANGE_TODOLIST_TITLE', id: todoListId, title: newTodolistTitle}\n}\n\nexport const changeTodolistFilterAC = (todoListId: string, newFilter: FilterValuesType): ChangeTodolistFilterActionType => {\n    return {type: 'CHANGE_TODOLIST_FILTER', id: todoListId, filter: newFilter}\n}\n\nexport const setTodoListsAC = (todoLists: Array<TodoListType>): SetTodoListsActionType => {\n    return {type: 'SET_TODOLISTS', todoLists}\n}\n//Thunk - функция, которая принимает dispatch, getState и предназначена для того, чтобы внутри нее делать побочные эффекты (запросы на сервер) и диспатчить action или другие thunk.\nexport const getTodoTC = () => (dispatch: Dispatch) => {\n    todoListAPI.getTodoLists()\n        .then((res) => {\n            const todos = res.data\n            dispatch(setTodoListsAC(todos))\n        })\n}\n\nexport const deleteTodoTC = (todoId: string) => (dispatch: Dispatch) => {\n    todoListAPI.deleteTodo(todoId)\n        .then(() => {\n            dispatch(removeTodoListAC(todoId))\n        })\n}\n\nexport const addTodoTC = (newTodolistTitle: string) => (dispatch: Dispatch) => {\n    todoListAPI.createTodo(newTodolistTitle)\n        .then((res) => {\n            dispatch(addTodoListAC(res.data.data.item))\n        })\n}\n\nexport const changeTodolistTitleTC = (id: string, title: string) => (dispatch: Dispatch) => {\n    todoListAPI.updateTodo(id, title)\n        .then((res) => {\n            dispatch(changeTodolistTitleAC(id, title))\n        })\n}\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {\r\n    addTodoTC,\r\n    changeTodolistFilterAC,changeTodolistTitleTC, deleteTodoTC, FilterValuesType, getTodoTC,\r\n    TodoListDomainType,\r\n} from \"./state/todolists-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {TaskType} from \"./api/todolist-api\";\r\n\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction AppWithRedux() {\r\n\r\n    useEffect(() => {\r\n        dispatch(getTodoTC()) //диспатчим вызов санки\r\n    }, [])\r\n\r\n    const dispatch = useDispatch()\r\n    const todoLists = useSelector<AppRootStateType, Array<TodoListDomainType>>(state => state.todoLists)\r\n\r\n    const changeTodoListTitle = useCallback((todoListID: string, newTitle: string) => {\r\n        dispatch(changeTodolistTitleTC(todoListID, newTitle))\r\n    }, [])\r\n\r\n    const changeTodolistFilter = useCallback((todoListID: string, newFilterValue: FilterValuesType) => {\r\n        dispatch(changeTodolistFilterAC(todoListID, newFilterValue))\r\n    }, [dispatch])\r\n\r\n    const removeTodoList = useCallback((todoListID: string) => {\r\n        dispatch(deleteTodoTC(todoListID))\r\n    }, [])\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        dispatch(addTodoTC(title))\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px'}}><AddItemForm addItem={addTodoList} todoId={''}/></Grid>\r\n                <Grid container spacing={5}>{\r\n                    todoLists.map((tl, index) => {\r\n                        return (\r\n                            <Grid item key={index}>\r\n                                <Paper style={{padding: '20px'}} elevation={6}>\r\n                                    <Todolist\r\n                                        todolist={tl}\r\n                                        key={tl.id}\r\n                                        changeTodolistFilter={changeTodolistFilter}\r\n                                        changeTodoListTitle={changeTodoListTitle}\r\n                                        removeTodoList={removeTodoList}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        )\r\n                    })\r\n                }</Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport {todoListsReducer} from \"./todolists-reducer\";\nimport {tasksReducer} from \"./tasks-reducer\";\nimport thunk from \"redux-thunk\";\n// объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\nconst rootReducer = combineReducers({\n    todoLists: todoListsReducer,\n    tasks: tasksReducer\n})\n// непосредственно создаём store\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport AppWithRedux from './AppWithRedux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}