{"version":3,"sources":["api/todolist-api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodoListsList/todolists-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodoListsList/tasks-reducer.ts","features/TodoListsList/TodoList/Task/Task.tsx","features/TodoListsList/TodoList/Todolist.tsx","features/TodoListsList/TodoListsList.tsx","components/ErrorSnackbar/Errorsnackbar.tsx","features/Login/Login.tsx","app/App.tsx","serviceWorker.ts","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","instance","axios","create","withCredentials","baseURL","headers","todoListAPI","get","title","post","todoId","delete","put","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","authReducer","reducer","actions","isInitialized","setAppInitializedAC","appReducer","removeTodoListAC","index","findIndex","todo","id","splice","addTodoListAC","unshift","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","setTodoListsAC","todoLists","map","changeTodolistEntityStatusAC","todoListsReducer","AddItemForm","React","memo","addItem","disabled","useState","itemName","setItemName","setError","addItemLocal","trim","TextField","size","variant","onChange","event","currentTarget","onKeyPress","key","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","console","log","editMode","setEditMode","setTitle","onBlur","saveNewTitle","autoFocus","onDoubleClick","removeTaskAC","tasks","task","addTaskAC","todoListId","updateTaskAC","setTaskAC","extraReducers","builder","addCase","forEach","tasksReducer","updateTaskTC","domainModel","getState","find","el","apiModel","startDate","priority","description","deadline","then","res","resultCode","catch","warn","Task","changeTaskTitle","useCallback","className","Completed","Checkbox","checked","changeStatus","New","removeTask","Todolist","demo","useEffect","todolist","items","useSelector","useDispatch","allTodoListTasks","tasksForTodolist","onAllClickHandler","changeTodolistFilter","onActiveClickHandler","onCompletedClickHandler","removeTaskTC","changeTodoListTitle","newTitle","addTask","item","addTaskTC","removeTodoList","Delete","Button","TodoListsList","auth","todos","todoListID","newFilterValue","addTodoList","newTodolistTitle","Grid","container","style","padding","spacing","tl","Paper","elevation","to","Alert","ErrorSnackbar","app","handleClose","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","type","FormControlLabel","control","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","Boolean","window","location","hostname","match","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","concat","logger","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.80849f2e.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    headers: {\n        'API-KEY': '0bbbf023-77a9-44fe-841d-51e508b8f676'\n    }\n})\n\n//api\nexport const todoListAPI = {\n    getTodoLists() {\n        return instance.get<Array<TodoListType>>(`todo-lists`)\n    },\n    createTodo(title: string) {\n        return instance.post<CommonResponseType<{ item: TodoListType }>>(`todo-lists`, {title})\n    },\n    deleteTodo(todoId: string) {\n        return instance.delete<CommonResponseType>(`todo-lists/${todoId}`)\n    },\n    updateTodo(todoId: string, title: string = '') {\n        return instance.put<CommonResponseType>(`todo-lists/${todoId}`, {title})\n    },\n    getTask(todoId: string) {\n        return instance.get<GetTaskResponse>(`todo-lists/${todoId}/tasks`)\n    },\n    createTask(todoId: string, title: string = 'new task') {\n        return instance.post<CommonResponseType<{ item: TaskType }>>(`todo-lists/${todoId}/tasks`, {title})\n    },\n    deleteTask(todoId: string, taskId: string) {\n        return instance.delete<CommonResponseType>(`todo-lists/${todoId}/tasks/${taskId}`)\n    },\n    updateTask(todoId: string, taskId: string, model: UpdateTaskModelType) {\n        return instance.put<CommonResponseType>(`todo-lists/${todoId}/tasks/${taskId}`, model)\n    }\n}\n\nexport const authAPI = {\n    login(data: LoginParamsType) {\n        return instance.post<CommonResponseType<{userId: number}>>(`/auth/login`, data)\n    },\n    me(){\n        return instance.get<CommonResponseType<AuthMeType>>(`/auth/me`)\n    },\n    logout() {\n        return instance.delete<CommonResponseType<{userId: number}>>(`/auth/login`)\n    }\n}\n\n//types\nexport type AuthMeType = {\n    id: number\n    email: string\n    login: string\n}\nexport type LoginParamsType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha?: string\n}\nexport type TodoListType = {\n    id: string\n    title: string\n    addedDate: string\n    order: number\n}\nexport type UpdateTaskModelType = {\n    title: string\n    description: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n}\nexport enum TaskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3\n}\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n}\nexport type TaskType = {\n    description: string\n    title: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n}\ntype GetTaskResponse = {\n    error: string | null\n    totalCount: number\n    items: TaskType[]\n}\nexport type CommonResponseType<T = {}> = {\n    resultCode: number\n    messages: Array<string>\n    fieldsErrors: Array<string>\n    data: T\n}\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"../app/app-reducer\";\nimport {CommonResponseType} from \"../api/todolist-api\";\nimport {Dispatch} from \"redux\";\n\nexport const handleServerAppError = <T>(data: CommonResponseType<T>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\n    if (data.messages.length) {\n        dispatch(setAppErrorAC({error: data.messages[0]}))\n    } else {\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\n    }\n    dispatch(setAppStatusAC({status: 'failed'}))\n}\n\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\n    dispatch(setAppErrorAC({error: error.message ? error.message : 'Some error occurred'}))\n    dispatch(setAppStatusAC({status: 'failed'}))\n}","import {Dispatch} from 'redux'\nimport {setAppStatusAC} from '../../app/app-reducer'\nimport {authAPI, LoginParamsType} from \"../../api/todolist-api\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\nconst initialState = {\n    isLoggedIn: false\n}\n\nconst slice = createSlice({\n    name: 'auth',\n    initialState: initialState,\n    reducers: {\n        setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\n            state.isLoggedIn = action.payload.value\n        }\n    }\n})\n\nexport const authReducer = slice.reducer\nexport const {setIsLoggedInAC} = slice.actions\n// export const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n//     switch (action.type) {\n//         case 'login/SET-IS-LOGGED-IN':\n//             return {...state, isLoggedIn: action.value}\n//         default:\n//             return state\n//     }\n// }\n\n// actions\n// export const setIsLoggedInAC = (value: boolean) =>\n//     ({type: 'login/SET-IS-LOGGED-IN', value} as const)\n\n// thunks\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC({status: 'loading'}))\n    authAPI.login(data)\n        .then(res => {\n            if (res.data.resultCode === 0) {\n                dispatch(setIsLoggedInAC({value: true}))\n                dispatch(setAppStatusAC({status: 'succeeded'}))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch(error => {\n            handleServerNetworkError(error, dispatch)\n        })\n}\nexport const logoutTC = () => (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC({status: 'loading'}))\n    authAPI.logout()\n        .then(res => {\n            if (res.data.resultCode === 0) {\n                dispatch(setIsLoggedInAC({value: false}))\n                dispatch(setAppStatusAC({status: 'succeeded'}))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch(error => {\n            handleServerNetworkError(error, dispatch)\n        })\n}\n\n// types\n// type InitialStateType = typeof initialState\n// export type SetIsLoggedInActionType = ReturnType<typeof setIsLoggedInAC>\n// type ActionsType = SetIsLoggedInActionType | SetAppStatusActionType | SetAppErrorActionType","import {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\nimport {authAPI} from \"../api/todolist-api\";\nimport {Dispatch} from \"redux\";\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\n// const SET_ERROR = 'APP/SET_ERROR'\n// const SET_STATUS = 'APP/SET_STATUS'\n// const SET_INITIALIZED = 'APP/SET_INITIALIZED'\n\nexport const initialState: InitialStateType = {\n    status: 'idle',\n    error: null,\n    isInitialized: false\n}\n\nconst slice = createSlice({\n    name: 'app',\n    initialState: initialState,\n    reducers: {\n        setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\n            state.error = action.payload.error\n        },\n        setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\n            state.status = action.payload.status\n        },\n        setAppInitializedAC(state, action: PayloadAction<{ isInitialized: boolean }>) {\n            state.isInitialized = action.payload.isInitialized\n        }\n    }\n})\n\nexport const appReducer = slice.reducer\nexport const {setAppErrorAC, setAppStatusAC, setAppInitializedAC} = slice.actions\n\n// export const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n//     switch (action.type) {\n//         case SET_ERROR:\n//             return {...state, error: action.error}\n//         case SET_STATUS:\n//             return {...state, status: action.status}\n//         case SET_INITIALIZED:\n//             return {...state, isInitialized: action.isInitialized}\n//         default:\n//             return state\n//     }\n// }\n\n// export const setAppErrorAC = (error: string | null) => ({type: 'APP/SET_ERROR', error} as const)\n// export const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET_STATUS', status} as const)\n// export const setAppInitializedAC = (isInitialized: boolean) => ({type: 'APP/SET_INITIALIZED', isInitialized} as const)\n\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\n    authAPI.me().then(res => {\n        if (res.data.resultCode === 0) {\n            dispatch(setIsLoggedInAC({value: true}))\n        } else {\n        }\n        dispatch(setAppInitializedAC({isInitialized: true}))\n    })\n}\n\nexport type InitialStateType = {\n    status: RequestStatusType\n    error: string | null\n    isInitialized: boolean\n}\n\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\n\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>;\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>;\nexport type SetAppInitializedActionType = ReturnType<typeof setAppInitializedAC>;\n// type ActionsType =\n//     SetAppErrorActionType\n//     | SetAppStatusActionType\n//     | SetAppInitializedActionType\n","import {todoListAPI, TodoListType} from \"../../api/todolist-api\";\nimport {Dispatch} from \"redux\";\nimport {RequestStatusType, setAppStatusAC,} from \"../../app/app-reducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\n//variables\n// const REMOVE_TODOLIST = 'REMOVE_TODOLIST'\n// const ADD_TODOLIST = 'ADD_TODOLIST'\n// const CHANGE_TODOLIST_TITLE = 'CHANGE_TODOLIST_TITLE'\n// const CHANGE_TODOLIST_FILTER = 'CHANGE_TODOLIST_FILTER'\n// const SET_TODOLISTS = 'SET_TODOLISTS'\n// const CHANGE_TODOLIST_ENTITY_STATUS = 'CHANGE_TODOLIST_ENTITY_STATUS'\n\nconst initialState: Array<TodoListDomainType> = []\n\nconst slice = createSlice({\n    name: 'todolists',\n    initialState: initialState,\n    reducers: {\n        removeTodoListAC(state, action: PayloadAction<{ id: string }>) {\n            const index = state.findIndex(todo => todo.id === action.payload.id)\n            if (index > -1) {\n                state.splice(index, 1)\n            }\n        },\n        addTodoListAC(state, action: PayloadAction<{ todo: TodoListType }>) {\n            state.unshift({...action.payload.todo, filter: 'all', entityStatus: 'idle'})\n        },\n        changeTodolistTitleAC(state, action: PayloadAction<{ id: string, title: string }>) {\n            const index = state.findIndex(todo => todo.id === action.payload.id)\n            state[index].title = action.payload.title\n        },\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\n            const index = state.findIndex(todo => todo.id === action.payload.id)\n            state[index].filter = action.payload.filter\n        },\n        setTodoListsAC(state, action: PayloadAction<{ todoLists: Array<TodoListType> }>) {\n            return action.payload.todoLists.map(todo => ({...todo, filter: 'all', entityStatus: 'idle'}))\n        },\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\n            const index = state.findIndex(todo => todo.id === action.payload.id)\n            state[index].entityStatus = action.payload.status\n        }\n    }\n})\n\nexport const todoListsReducer = slice.reducer\nexport const {\n    removeTodoListAC, addTodoListAC, changeTodolistTitleAC,\n    changeTodolistFilterAC, setTodoListsAC, changeTodolistEntityStatusAC\n} = slice.actions\n\n// export const todoListsReducer = (state: Array<TodoListDomainType> = InitialState, action: ActionsTypes): Array<TodoListDomainType> => {\n//     switch (action.type) {\n//         case REMOVE_TODOLIST:\n//             return state.filter(todo => todo.id !== action.id)\n//         case ADD_TODOLIST:\n//             return [{...action.todo, filter: 'all', entityStatus: 'idle'}, ...state]\n//         case CHANGE_TODOLIST_TITLE:\n//             return state.map(todo => todo.id === action.id ? {...todo, title: action.title} : todo)\n//         case CHANGE_TODOLIST_FILTER:\n//             return state.map(todo => todo.id === action.id ? {...todo, filter: action.filter} : todo)\n//         case CHANGE_TODOLIST_ENTITY_STATUS:\n//             return state.map(todo => todo.id === action.id ? {...todo, entityStatus: action.status} : todo)\n//         case SET_TODOLISTS:\n//             return action.todoLists.map(todo => ({...todo, filter: 'all', entityStatus: 'idle'}))\n//         default:\n//             return state\n//     }\n// }\n\n//actions\n// export const removeTodoListAC = (id: string) =>\n//     ({type: 'REMOVE_TODOLIST', id} as const)\n// export const addTodoListAC = (todo: TodoListType) =>\n//     ({type: 'ADD_TODOLIST', todo} as const)\n// export const changeTodolistTitleAC = (id: string, title: string) =>\n//     ({type: 'CHANGE_TODOLIST_TITLE', id, title} as const)\n// export const changeTodolistFilterAC = (id: string, filter: FilterValuesType) =>\n//     ({type: 'CHANGE_TODOLIST_FILTER', id, filter} as const)\n// export const setTodoListsAC = (todoLists: Array<TodoListType>) =>\n//     ({type: 'SET_TODOLISTS', todoLists} as const)\n// export const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) =>\n//     ({type: 'CHANGE_TODOLIST_ENTITY_STATUS', id, status} as const)\n\n//thunks - функция, которая принимает dispatch, getState и предназначена для того, чтобы внутри нее делать побочные эффекты (запросы на сервер) и диспатчить action или другие thunk.\nexport const getTodoTC = () => (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC({status: 'loading'}))\n    todoListAPI.getTodoLists()\n        .then((res) => {\n            const todos = res.data\n            dispatch(setTodoListsAC({todoLists: todos}))\n            dispatch(setAppStatusAC({status: 'succeeded'}))\n        })\n}\nexport const deleteTodoTC = (todoId: string) => (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC({status: 'loading'}))\n    dispatch(changeTodolistEntityStatusAC({id: todoId, status: 'loading'}))\n    todoListAPI.deleteTodo(todoId)\n        .then(() => {\n            dispatch(removeTodoListAC({id: todoId}))\n            dispatch(setAppStatusAC({status: 'succeeded'}))\n        })\n}\nexport const addTodoTC = (newTodolistTitle: string) => (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC({status: 'loading'}))\n    todoListAPI.createTodo(newTodolistTitle)\n        .then((res) => {\n            if (res.data.resultCode === 0) {\n                dispatch(addTodoListAC({todo: res.data.data.item}))\n                dispatch(setAppStatusAC({status: 'succeeded'}))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch(error => {\n            handleServerNetworkError(error, dispatch)\n        })\n}\nexport const changeTodolistTitleTC = (id: string, title: string) => (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC({status: 'loading'}))\n    todoListAPI.updateTodo(id, title)\n        .then(() => {\n            dispatch(changeTodolistTitleAC({id: id, title: title}))\n            dispatch(setAppStatusAC({status: 'succeeded'}))\n        })\n}\n\n//types\nexport type AddTodolistActionType = ReturnType<typeof addTodoListAC>\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodoListAC>\nexport type SetTodoListsActionType = ReturnType<typeof setTodoListsAC>\n// type ActionsTypes = ReturnType<typeof addTodoListAC> |\n//     ReturnType<typeof removeTodoListAC> |\n//     ReturnType<typeof changeTodolistTitleAC> |\n//     ReturnType<typeof changeTodolistFilterAC> |\n//     ReturnType<typeof setTodoListsAC> |\n//     ReturnType<typeof changeTodolistEntityStatusAC>\nexport type FilterValuesType = 'all' | 'active' | 'completed';\nexport type TodoListDomainType = TodoListType & {\n    filter: FilterValuesType,\n    entityStatus: RequestStatusType\n}\n// type ThunkDispatch = Dispatch<SetAppStatusActionType | SetAppErrorActionType>","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {AddBox} from \"@material-ui/icons\";\n\ntype PropsType = {\n    todoId: string\n    addItem: (title: string, todoId: string) => void\n    disabled?: boolean\n}\n\nexport const AddItemForm = React.memo(({addItem, disabled = false, todoId}: PropsType) => {\n    let [itemName, setItemName] = useState<string>('')\n    let [error, setError] = useState<string | null>(null)\n\n    function onItemNameChanged(event: ChangeEvent<HTMLInputElement>) {\n        setItemName(event.currentTarget.value);\n        setError(null);\n    }\n\n    function onAddItemKeyPressed(event: KeyboardEvent<HTMLInputElement>) {\n        if (error !== null) setError(null)\n        if (event.key === 'Enter') {\n            addItemLocal()\n        }\n    }\n\n    function addItemLocal() {\n        if (itemName.trim() !== '') {\n            addItem(itemName.trim(), todoId);\n            setItemName('');\n        } else {\n            setError('Title is required!');\n        }\n    }\n\n    return (\n        <div>\n            <TextField size={\"small\"}\n                       disabled={disabled}\n                       variant={'outlined'}\n                       value={itemName}\n                       onChange={onItemNameChanged}\n                       onKeyPress={onAddItemKeyPressed}\n                       error={!!error} //! - преобразование в булевый тип, !! - приведение в противоположный, className={error ? 'error' : ''}\n                       label={'Title'}\n                       helperText={error} //{error && <div className={'error_message'}>{error}</div>}\n            />\n            <IconButton color={\"primary\"} onClick={addItemLocal} disabled={disabled}>\n                <AddBox/>\n            </IconButton>\n        </div>\n    )\n})\n","import React, {ChangeEvent, useState} from \"react\";\nimport {TextField} from \"@material-ui/core\";\n\ntype PropsType = {\n    title: string\n    saveNewTitle: (newTitle: string) => void\n}\n\nexport const EditableSpan = React.memo((props: PropsType) => {\n    console.log('span')\n    let [editMode, setEditMode] = useState<boolean>(false)\n    let [title, setTitle] = useState<string>(props.title)\n\n    function activatedEditMode() {\n        setEditMode(true)\n        setTitle(props.title)\n    }\n\n    function deActivatedEditMode() {\n        setEditMode(false)\n        props.saveNewTitle(title)\n    }\n\n    function changeTitle(event: ChangeEvent<HTMLInputElement>) {\n        setTitle(event.currentTarget.value);\n    }\n\n    return editMode\n        ? <TextField\n            variant={'outlined'}\n            value={title}\n            onBlur={deActivatedEditMode}\n            autoFocus={true}\n            onChange={changeTitle}\n        />\n        : <span onDoubleClick={activatedEditMode}>{props.title}</span>\n})","import {\n    addTodoListAC,\n    removeTodoListAC,\n    setTodoListsAC\n} from \"./todolists-reducer\";\nimport {TaskPriorities, TaskStatuses, TaskType, todoListAPI, UpdateTaskModelType} from \"../../api/todolist-api\";\nimport {Dispatch} from \"redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"../../app/app-reducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\n//variables\n// const REMOVE_TASK = 'REMOVE_TASK'\n// const ADD_TASK = 'ADD_TASK'\n// const UPDATE_TASK = 'UPDATE_TASK'\n// const REMOVE_TODOLIST = 'REMOVE_TODOLIST'\n// const ADD_TODOLIST = 'ADD_TODOLIST'\n// const SET_TASKS = 'SET_TASKS'\n\nconst InitialState: TaskStateType = {}\n\nconst slice = createSlice({\n    name: 'tasks',\n    initialState: InitialState,\n    reducers: {\n        removeTaskAC(state, action: PayloadAction<{ taskId: string, todoId: string }>) {\n            const tasks = state[action.payload.todoId]\n            const index = tasks.findIndex(task => task.id === action.payload.taskId)\n            if (index > -1) {\n                tasks.splice(index, 1)\n            }\n        },\n        addTaskAC(state, action: PayloadAction<TaskType>) {\n            state[action.payload.todoListId].unshift(action.payload)\n        },\n        updateTaskAC(state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todoId: string }>) {\n            const tasks = state[action.payload.todoId]\n            const index = tasks.findIndex(task => task.id === action.payload.taskId)\n            if (index > -1) {\n                tasks[index] = {...tasks[index], ...action.payload.model}\n            }\n        },\n        setTaskAC(state, action: PayloadAction<{ tasks: Array<TaskType>, todoId: string }>) {\n            state[action.payload.todoId] = action.payload.tasks\n        }\n    },\n    extraReducers: (builder) => {\n        builder.addCase(addTodoListAC, (state, action) => {\n            state[action.payload.todo.id] = []\n        });\n        builder.addCase(removeTodoListAC, (state, action) => {\n            delete state[action.payload.id]\n        });\n\n        builder.addCase(setTodoListsAC, (state, action) => {\n            action.payload.todoLists.forEach((todo) => {\n                state[todo.id] = []\n            })\n        });\n    }\n})\n\nexport const tasksReducer = slice.reducer\nexport const {removeTaskAC, addTaskAC, updateTaskAC, setTaskAC} = slice.actions\n\n// export const tasksReducer = (state: TaskStateType = InitialState, action: ActionsTypes) => {\n//     switch (action.type) {\n//         case REMOVE_TASK:\n//             return {\n//                 ...state, [action.todolistId]: [...state[action.todolistId].filter(task => task.id !== action.taskId)]\n//             }\n//         case ADD_TASK:\n//             return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\n//         case UPDATE_TASK:\n//             return {\n//                 ...state, [action.todolistId]: state[action.todolistId]\n//                     .map(task => task.id === action.taskId ? {...task, ...action.model} : task)\n//             }\n//         case addTodoListAC.type:\n//             return {...state, [action.todo.id]: []}\n//         case REMOVE_TODOLIST:\n//             let stateCopy = {...state}\n//             delete stateCopy[action.id]\n//             return stateCopy\n//         case 'SET_TODOLISTS': {\n//             const stateCopy = {...state}\n//             action.todoLists.forEach(tl => {\n//                 stateCopy[tl.id] = [] // stateCopy -  ассоциативный массив\n//             })\n//             return stateCopy\n//         }\n//         case SET_TASKS:\n//             return {...state, [action.todolistId]: action.tasks}\n//         default:\n//             return state\n//     }\n// }\n\n//actions\n// export const removeTaskAC = (taskId: string, todolistId: string) =>\n//     ({type: 'REMOVE_TASK', taskId, todolistId} as const)\n// export const addTaskAC = (task: TaskType) =>\n//     ({type: 'ADD_TASK', task} as const)\n// export const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\n//     ({type: 'UPDATE_TASK', taskId, model, todolistId} as const)\n// export const setTaskAC = (tasks: Array<TaskType>, todolistId: string) =>\n//     ({type: 'SET_TASKS', tasks, todolistId} as const)\n\n//thunks\nexport const getTasksTC = (todoId: string) => (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC({status: 'loading'}))\n    todoListAPI.getTask(todoId)\n        .then((res) => {\n            const tasks = res.data.items\n            dispatch(setTaskAC({tasks, todoId}))\n            dispatch(setAppStatusAC({status: 'succeeded'}))\n        })\n}\nexport const removeTaskTC = (todoId: string, taskId: string) => (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC({status: 'loading'}))\n    todoListAPI.deleteTask(todoId, taskId)\n        .then(() => {\n            dispatch(removeTaskAC({taskId, todoId}))\n            dispatch(setAppStatusAC({status: 'succeeded'}))\n        })\n}\nexport const addTaskTC = (todoId: string, title: string) => (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC({status: 'loading'}))\n    todoListAPI.createTask(todoId, title)\n        .then((res) => {\n            if (res.data.resultCode === 0) {\n                dispatch(addTaskAC(res.data.data.item))\n                dispatch(setAppStatusAC({status: 'succeeded'}))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch(error => {\n            handleServerNetworkError(error, dispatch)\n        })\n}\nexport const updateTaskTC = (todoId: string, domainModel: UpdateDomainTaskModelType, taskId: string) =>\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\n        const task = getState().tasks[todoId].find(el => el.id === taskId)\n        if (!task) {\n            console.warn('task not found in the state')\n            return\n        }\n\n        const apiModel: UpdateTaskModelType = {\n            title: task.title,\n            startDate: task.startDate,\n            priority: task.priority,\n            description: task.description,\n            deadline: task.deadline,\n            status: task.status,\n            ...domainModel\n        }\n\n        todoListAPI.updateTask(todoId, taskId, apiModel)\n            .then((res) => {\n                if (res.data.resultCode === 0) {\n                    dispatch(updateTaskAC({taskId, model: domainModel, todoId}))\n                } else {\n                    handleServerAppError(res.data, dispatch)\n                }\n            })\n            .catch(error => {\n                handleServerNetworkError(error, dispatch)\n            })\n    }\n\n//types\nexport type UpdateDomainTaskModelType = {\n    title?: string\n    description?: string\n    status?: TaskStatuses\n    priority?: TaskPriorities\n    startDate?: string\n    deadline?: string\n}\nexport type TaskStateType = {\n    [key: string]: Array<TaskType>\n}\ntype ThunkDispatch = Dispatch<SetAppStatusActionType | SetAppErrorActionType>\n\n","import React, {ChangeEvent, useCallback} from 'react';\nimport {Checkbox, IconButton} from \"@material-ui/core\";\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport {TaskStatuses, TaskType} from \"../../../../api/todolist-api\";\n\nexport type TaskPropsType = {\n    task: TaskType\n    changeTaskTitle: (taskId: string, title: string, todoId: string) => void\n    changeStatus: (taskId: string, checked: TaskStatuses, todoId: string) => void\n    removeTask: (todoId: string, taskId: string) => void\n}\n\nexport const Task = React.memo((props: TaskPropsType) => {\n    let {id, title, status, todoListId} = props.task\n    const changeTaskTitle = useCallback((title: string) => {\n        props.changeTaskTitle(id, title, todoListId)\n    }, [props, id])\n    //в параметры коллбека нужно передать булево значение, хотя в типах у нас числа... используем тернарник который сразу резолвится, круто\n    let changeStatus = (event: ChangeEvent<HTMLInputElement>) =>\n        props.changeStatus(id, event.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New, todoListId)\n    let removeTask = () => props.removeTask(todoListId, id)\n\n    return (\n        <div key={id} className={status === TaskStatuses.Completed ? 'is_done' : ''}>\n            <Checkbox\n                color={'primary'}\n                checked={status === TaskStatuses.Completed}\n                onChange={changeStatus}\n            />\n            <EditableSpan title={title} saveNewTitle={changeTaskTitle}/>\n            <IconButton onClick={removeTask}>\n                <CancelIcon/>\n            </IconButton>\n        </div>\n    )\n})","import React, {useCallback, useEffect} from 'react';\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\nimport {Button, IconButton} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../../app/store\";\nimport {\n    addTaskTC,\n    getTasksTC,\n    removeTaskTC,\n    updateTaskTC\n} from \"../tasks-reducer\";\nimport {Task} from \"./Task/Task\";\nimport {TaskStatuses, TaskType} from \"../../../api/todolist-api\";\nimport {FilterValuesType, TodoListDomainType} from \"../todolists-reducer\";\n\n\ntype PropsType = {\n    todolist: TodoListDomainType\n    changeTodolistFilter: (todoListID: string, newFilterValue: FilterValuesType) => void\n    changeTodoListTitle: (taskID: string, newTitle: string) => void\n    removeTodoList: (todoListID: string) => void\n    demo?: boolean\n}\n\nexport const Todolist = React.memo(({demo = false, ...props}: PropsType) => {\n\n    useEffect(() => {\n        if(demo){\n            return\n        }\n        dispatch(getTasksTC(props.todolist.id))\n    }, [])\n\n    const tasks = useSelector<AppRootStateType, Array<TaskType>>((state) => state.tasks[props.todolist.id])\n    const dispatch = useDispatch()\n\n    let allTodoListTasks = tasks\n    let tasksForTodolist = allTodoListTasks\n    if (props.todolist.filter === 'active') {\n        tasksForTodolist = allTodoListTasks.filter(task => task.status === TaskStatuses.New)\n    }\n    if (props.todolist.filter === 'completed') {\n        tasksForTodolist = allTodoListTasks.filter(task => task.status === TaskStatuses.Completed)\n    }\n\n    const onAllClickHandler = useCallback(() =>\n        props.changeTodolistFilter(props.todolist.id, 'all'), [props])\n    const onActiveClickHandler = useCallback(() =>\n        props.changeTodolistFilter(props.todolist.id, 'active'), [props])\n    const onCompletedClickHandler = useCallback(() =>\n        props.changeTodolistFilter(props.todolist.id, 'completed'), [props])\n\n    function onClickRemoveTodoList() {\n        props.removeTodoList(props.todolist.id)\n    }\n\n    const removeTask = useCallback((todoId: string, taskId: string) => {\n        dispatch(removeTaskTC(todoId, taskId))\n    }, [])\n\n    const changeTodoListTitle = useCallback((newTitle: string) => {\n        props.changeTodoListTitle(props.todolist.id, newTitle)\n    }, [props])\n\n    const addTask = useCallback((title: string, todoId: string) => {\n        dispatch(addTaskTC(todoId, title))\n    }, [])\n\n    const changeStatus = useCallback((taskId: string, status: TaskStatuses, todoId: string) => {\n        dispatch(updateTaskTC(todoId, {status}, taskId))\n    }, [])\n\n    const changeTaskTitle = useCallback((taskId: string, newTitle: string, todoId: string) => {\n        dispatch(updateTaskTC(todoId, {title: newTitle}, taskId))\n    }, [])\n\n    return <div>\n        <h3><EditableSpan title={props.todolist.title} saveNewTitle={changeTodoListTitle}/>\n            <IconButton onClick={onClickRemoveTodoList} disabled={props.todolist.entityStatus === 'loading'}>\n                <Delete/>\n            </IconButton>\n        </h3>\n        <AddItemForm addItem={addTask} todoId={props.todolist.id} disabled={props.todolist.entityStatus === 'loading'}/>\n        <div>\n            {\n                tasksForTodolist.map((task, index) => {\n                    return (<Task\n                        key={index}\n                        task={task}\n                        removeTask={removeTask}\n                        changeStatus={changeStatus}\n                        changeTaskTitle={changeTaskTitle}/>)\n                })}\n        </div>\n        <div>\n            <Button variant={props.todolist.filter === 'all' ? 'contained' : 'outlined'}\n                    color={props.todolist.filter === 'all' ? 'default' : 'primary'}\n                    onClick={onAllClickHandler}>All\n            </Button>\n            <Button variant={props.todolist.filter === 'active' ? 'contained' : 'outlined'}\n                    color={props.todolist.filter === 'active' ? 'default' : 'primary'}\n                    onClick={onActiveClickHandler}>Active\n            </Button>\n            <Button variant={props.todolist.filter === 'completed' ? 'contained' : 'outlined'}\n                    color={props.todolist.filter === 'completed' ? 'default' : 'primary'}\n                    onClick={onCompletedClickHandler}>Completed\n            </Button>\n        </div>\n    </div>\n})\n","import React, {useCallback, useEffect} from \"react\";\nimport {\n    addTodoTC,\n    changeTodolistFilterAC,\n    changeTodolistTitleTC,\n    deleteTodoTC,\n    FilterValuesType,\n    getTodoTC,\n    TodoListDomainType\n} from \"./todolists-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {Grid, Paper} from \"@material-ui/core\";\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\nimport {Todolist} from \"./TodoList/Todolist\";\nimport {Redirect} from \"react-router-dom\";\n\ntype PropsType = {\n    demo?: boolean\n}\n\nexport const TodoListsList: React.FC<PropsType> = ({demo = false}) => {\n    const dispatch = useDispatch()\n    const todoLists = useSelector<AppRootStateType, Array<TodoListDomainType>>(state => state.todoLists)\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n\n    useEffect(() => {\n        if(demo || !isLoggedIn){\n            return\n        }\n        dispatch(getTodoTC()) //диспатчим вызов санки\n    }, [])\n\n    const changeTodoListTitle = useCallback((todoListID: string, newTitle: string) => {\n        dispatch(changeTodolistTitleTC(todoListID, newTitle))\n    }, [])\n\n    const changeTodolistFilter = useCallback((todoListID: string, newFilterValue: FilterValuesType) => {\n        dispatch(changeTodolistFilterAC({id: todoListID, filter: newFilterValue}))\n    }, [dispatch])\n\n    const removeTodoList = useCallback((todoListID: string) => {\n        dispatch(deleteTodoTC(todoListID))\n    }, [])\n\n    const addTodoList = useCallback((title: string) => {\n        dispatch(addTodoTC(title))\n    }, [])\n\n    if(!isLoggedIn) {\n        return <Redirect to={'/login'} />\n    }\n\n    return <>\n        <Grid container style={{padding: '20px'}}><AddItemForm addItem={addTodoList} todoId={''}/></Grid>\n        <Grid container spacing={5}>{\n            todoLists.map((tl, index) => {\n                return (\n                    <Grid item key={index}>\n                        <Paper style={{padding: '20px'}} elevation={6}>\n                            <Todolist\n                                todolist={tl}\n                                key={tl.id}\n                                changeTodolistFilter={changeTodolistFilter}\n                                changeTodoListTitle={changeTodoListTitle}\n                                removeTodoList={removeTodoList}\n                                demo={demo}\n                            />\n                        </Paper>\n                    </Grid>\n                )\n            })\n        }</Grid>\n    </>\n}","import React from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {setAppErrorAC} from \"../../app/app-reducer\";\n\nfunction Alert(props: AlertProps) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nexport function ErrorSnackbar() {\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\n    const dispatch = useDispatch()\n\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        dispatch(setAppErrorAC({error: null}))\n    };\n\n    const isOpen = error !== null\n\n    return (\n            <Snackbar open={isOpen} autoHideDuration={3000} onClose={handleClose}>\n                <Alert onClose={handleClose} severity=\"error\">\n                    {error}\n                </Alert>\n            </Snackbar>\n    );\n}","import React from 'react'\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\nimport {useFormik} from \"formik\";\nimport {loginTC} from \"./auth-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport { Redirect } from 'react-router-dom';\n\ntype FormikErrorType = {\n    email?: string\n    password?: string\n    rememberMe?: boolean\n}\n\nexport const Login = () => {\n    const dispatch = useDispatch()\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n\n            if (!values.password) {\n                errors.password = 'Required';\n            } else if (values.password.length < 3) {\n                errors.password = 'Invalid password';\n            }\n            return errors;\n        },\n        onSubmit: values => {\n            dispatch(loginTC(values))\n        },\n    })\n\n    if(isLoggedIn) {\n       return <Redirect to={'/'}/>\n    }\n\n    return <Grid container justify=\"center\">\n        <Grid item xs={4}>\n            <form onSubmit={formik.handleSubmit}>\n                <FormControl>\n                    <FormLabel>\n                        <p>To log in get registered\n                            <a href={'https://social-network.samuraijs.com/'}\n                               target={'_blank'}>here\n                            </a>\n                        </p>\n                        <p>or use common test account credentials:</p>\n                        <p>Email: free@samuraijs.com</p>\n                        <p>Password: free</p>\n                    </FormLabel>\n                    <FormGroup>\n                        <TextField\n                            label=\"Email\"\n                            margin=\"normal\"\n                            {...formik.getFieldProps('email')}\n                        />\n                        {formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\n                        <TextField\n                            type=\"password\"\n                            label=\"Password\"\n                            margin=\"normal\"\n                            {...formik.getFieldProps('password')}\n                        />\n                        {formik.errors.password ? <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\n                        <FormControlLabel\n                            label={'Remember me'}\n                            control={<Checkbox {...formik.getFieldProps('rememberMe')}/>}\n                        />\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\n                    </FormGroup>\n                </FormControl>\n            </form>\n        </Grid>\n    </Grid>\n}\n","import React, {useCallback, useEffect} from 'react';\nimport './App.css';\nimport {AppBar, Button, CircularProgress, Container, IconButton, LinearProgress, Toolbar, Typography} from \"@material-ui/core\";\nimport {Menu} from \"@material-ui/icons\";\nimport {TodoListsList} from \"../features/TodoListsList/TodoListsList\";\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/Errorsnackbar\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./store\";\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer\";\nimport {Route, Switch, Redirect} from 'react-router-dom';\nimport {Login} from \"../features/Login/Login\";\nimport {logoutTC} from \"../features/Login/auth-reducer\";\n\ntype PropsType = {\n    demo?: boolean\n}\n\nfunction App({demo = false}: PropsType) {\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        if (!demo) {\n            dispatch(initializeAppTC())\n        }\n    }, [])\n\n    const logoutHandler = useCallback(() => {\n        dispatch(logoutTC())\n    }, [])\n\n    if (!isInitialized) {\n        return <div\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\n            <CircularProgress/>\n        </div>\n    }\n\n    return (\n        <div className=\"App\">\n            <ErrorSnackbar/>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                        News\n                    </Typography>\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\n                </Toolbar>\n                {status === 'loading' && <LinearProgress/>}\n            </AppBar>\n            <Container fixed>\n                    <Switch>\n                        <Route exact path={'/'} render={() => <TodoListsList demo={demo}/>}/>\n                        <Route path={'/login'} render={() => <Login/>}/>\n                        <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\n                        <Redirect from={'*'} to={'/404'}/>\n                    </Switch>\n            </Container>\n        </div>\n    );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers} from \"redux\";\nimport {todoListsReducer} from \"../features/TodoListsList/todolists-reducer\";\nimport {tasksReducer} from \"../features/TodoListsList/tasks-reducer\";\nimport {appReducer} from \"./app-reducer\";\nimport {authReducer} from \"../features/Login/auth-reducer\";\nimport {configureStore} from \"@reduxjs/toolkit\";\nimport logger from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\n\nconst rootReducer = combineReducers({\n    todoLists: todoListsReducer,\n    tasks: tasksReducer,\n    app: appReducer,\n    auth: authReducer\n})\n\nexport type RootReducerType = typeof rootReducer\n\n//export const store = createStore(rootReducer, applyMiddleware(thunk));\nexport const store = configureStore({\n    reducer: rootReducer,\n    middleware: getDefaultMiddleware =>\n        getDefaultMiddleware()\n            .prepend(thunkMiddleware)\n            .concat(logger)\n})\n\nexport type AppRootStateType = ReturnType<RootReducerType>\n\n// @ts-ignore\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./app/store\";\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}