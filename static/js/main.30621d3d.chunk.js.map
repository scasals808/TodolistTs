{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","state/tasks-reducer.ts","Todolist.tsx","state/todolists-reducer.ts","AppWithRedux.tsx","serviceWorker.ts","state/store.ts","index.tsx"],"names":["AddItemForm","props","useState","itemName","setItemName","error","setError","addItemLocal","trim","addItem","TextField","size","variant","value","onChange","event","currentTarget","onKeyPress","key","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","title","setTitle","onBlur","saveNewTitle","autoFocus","onDoubleClick","InitialState","changeTitleAndStatus","tasks","taskId","property","propertyName","map","task","id","Todolist","useSelector","state","todolist","dispatch","useDispatch","allTodoListTasks","tasksForTodolist","filter","isDone","newTitle","changeTodoListTitle","removeTodoList","Delete","todolistId","type","addTaskAC","className","Checkbox","checked","newCheckBoxValue","Button","changeTodolistFilter","AppWithRedux","todoLists","todoListID","newFilterValue","action","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","v1","spacing","tl","item","Paper","elevation","Boolean","window","location","hostname","match","rootReducer","combineReducers","todo","newTodoList","newTask","newState","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.30621d3d.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {AddBox} from \"@material-ui/icons\";\n\ntype PropsType = {\n    addItem: (title: string) => void\n}\n\nexport function AddItemForm(props: PropsType) {\n    let [itemName, setItemName] = useState<string>('')\n    let [error, setError] = useState<string | null>(null)\n\n    function onItemNameChanged(event: ChangeEvent<HTMLInputElement>) {\n        setItemName(event.currentTarget.value);\n        setError(null);\n    }\n\n    function onAddItemKeyPressed(event: KeyboardEvent<HTMLInputElement>) {\n        if (event.key === 'Enter') {\n            addItemLocal()\n        }\n    }\n\n    function addItemLocal() {\n        if (itemName.trim() !== '') {\n            props.addItem(itemName.trim());\n            setItemName('');\n        } else {\n            setError('Title is required!');\n        }\n    }\n\n    return (\n        <div>\n            <TextField size={\"small\"}\n                variant={'outlined'}\n                value={itemName}\n                onChange={onItemNameChanged}\n                onKeyPress={onAddItemKeyPressed}\n                error={!!error} //! - преобразование в булевый тип, !! - приведение в противоположный, className={error ? 'error' : ''}\n                label={'Title'}\n                helperText={error} //{error && <div className={'error_message'}>{error}</div>}\n            />\n            <IconButton color={\"primary\"} onClick={addItemLocal}>\n                <AddBox />\n            </IconButton>\n        </div>\n    )\n}\n","import React, {ChangeEvent, useState} from \"react\";\nimport {TextField} from \"@material-ui/core\";\n\ntype PropsType = {\n    title: string\n    saveNewTitle: (newTitle: string) => void\n}\n\nexport function EditableSpan(props: PropsType) {\n    let [editMode, setEditMode] = useState<boolean>(false)\n    let [title, setTitle] = useState<string>(props.title)\n\n\n    function activatedEditMode() {\n        setEditMode(true)\n        setTitle(props.title)\n    }\n\n    function deActivatedEditMode() {\n        debugger;\n        setEditMode(false)\n        props.saveNewTitle(title)\n    }\n\n    function changeTitle(event: ChangeEvent<HTMLInputElement>) {\n        setTitle(event.currentTarget.value);\n    }\n\n    return editMode\n        ? <TextField\n            variant={'outlined'}\n            value={title}\n            onBlur={deActivatedEditMode}\n            autoFocus={true}\n            onChange={changeTitle}\n        />\n        : <span onDoubleClick={activatedEditMode}>{props.title}</span>\n}","import {TaskStateType, TaskType, TodoListType} from \"../AppWithRedux\";\nimport {v1} from \"uuid\";\nimport {AddTodolistActionType, RemoveTodolistActionType} from \"./todolists-reducer\";\n\nconst REMOVE_TASK = 'REMOVE_TASK'\nconst ADD_TASK = 'ADD_TASK'\nconst CHANGE_TASK = 'CHANGE_TASK'\nconst CHANGE_TASK_TITLE = 'CHANGE_TASK_TITLE'\nconst REMOVE_TODOLIST = 'REMOVE_TODOLIST'\nconst ADD_TODOLIST = 'ADD_TODOLIST'\n\ntype RemoveTaskActionType = {\n    type: 'REMOVE_TASK',\n    taskId: string,\n    todolistId: string\n}\n\ntype AddTaskActionType = {\n    type: 'ADD_TASK',\n    title: string,\n    todolistId: string\n}\n\ntype ChangeTaskStatusActionType = {\n    type: 'CHANGE_TASK',\n    taskId: string\n    isDone: boolean,\n    todolistId: string\n}\n\ntype ChangeTaskTitleActionType = {\n    type: 'CHANGE_TASK_TITLE',\n    taskId: string\n    title: string,\n    todolistId: string\n}\n\ntype ActionsTypes = RemoveTaskActionType |\n    AddTaskActionType |\n    ChangeTaskStatusActionType |\n    ChangeTaskTitleActionType |\n    AddTodolistActionType |\n    RemoveTodolistActionType\n\nconst InitialState: TaskStateType = {}\n\nexport const tasksReducer = (state: TaskStateType = InitialState, action: ActionsTypes) => {\n    switch (action.type) {\n        case REMOVE_TASK:\n            let newTodoList = [...state[action.todolistId].filter(task => task.id !== action.taskId)]\n            return {...state, [action.todolistId]: newTodoList}\n        case ADD_TASK:\n            let newTask = {id: v1(), title: action.title, isDone: false}\n            return {...state, [action.todolistId]: [newTask, ...state[action.todolistId]]}\n        case CHANGE_TASK:\n            return {\n                ...state,\n                [action.todolistId]: changeTitleAndStatus(state[action.todolistId], action.taskId, action.isDone)\n            }\n        case CHANGE_TASK_TITLE:\n            return {\n                ...state,\n                [action.todolistId]: changeTitleAndStatus(state[action.todolistId], action.taskId, action.title)\n            }\n        case ADD_TODOLIST:\n            return {\n                ...state,\n                [action.todolistId]: []\n            }\n        case REMOVE_TODOLIST:\n            let newState = {...state}\n            delete newState[action.id]\n            return newState\n        default:\n            return state\n    }\n}\n\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\n    return {type: 'REMOVE_TASK', taskId, todolistId,}\n}\n\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\n    return {type: 'ADD_TASK', title, todolistId}\n}\n\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string): ChangeTaskStatusActionType => {\n    return {type: 'CHANGE_TASK', taskId, isDone, todolistId}\n}\n\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\n    return {type: 'CHANGE_TASK_TITLE', taskId, title, todolistId}\n}\n\nlet changeTitleAndStatus = (tasks: Array<TaskType>, taskId: string, property: string | boolean): Array<TaskType> => {\n    let propertyName = typeof property === 'string' ? 'title' : 'isDone'\n    return [...tasks.map(task => {\n        if (task.id !== taskId) {\n            return task\n        } else {\n            return {...task, [propertyName]: property}\n        }\n    })]\n}\n\n\n\n","import React, {ChangeEvent} from 'react';\r\nimport {TaskType, FilterValuesType, TodoListType} from './AppWithRedux';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./state/tasks-reducer\";\r\n\r\n\r\ntype PropsType = {\r\n    todolist: TodoListType\r\n    changeTodolistFilter: (todoListID: string, newFilterValue: FilterValuesType) => void\r\n    changeTodoListTitle: (taskID: string, newTitle: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n    const tasks = useSelector<AppRootStateType, Array<TaskType>>((state) => state.tasks[props.todolist.id])\r\n    const dispatch = useDispatch()\r\n\r\n    let allTodoListTasks = tasks\r\n    let tasksForTodolist = allTodoListTasks\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = allTodoListTasks.filter(task => task.isDone === false)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = allTodoListTasks.filter(task => task.isDone === true)\r\n    }\r\n\r\n    function onAllClickHandler() {\r\n        props.changeTodolistFilter(props.todolist.id, 'all')\r\n    }\r\n\r\n    function onActiveClickHandler() {\r\n        props.changeTodolistFilter(props.todolist.id, 'active')\r\n    }\r\n\r\n    function onCompletedClickHandler() {\r\n        props.changeTodolistFilter(props.todolist.id, 'completed')\r\n    }\r\n\r\n    function onClickRemoveTodoList() {\r\n        props.removeTodoList(props.todolist.id)\r\n    }\r\n\r\n    function changeTodoListTitle(newTitle: string) {\r\n        props.changeTodoListTitle(props.todolist.id, newTitle)\r\n    }\r\n\r\n    function addTask(title: string) {\r\n        dispatch(addTaskAC(title, props.todolist.id))\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan title={props.todolist.title} saveNewTitle={changeTodoListTitle}/>\r\n            <IconButton onClick={onClickRemoveTodoList}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(task => {\r\n                let removeTask = () => {\r\n                    dispatch(removeTaskAC(task.id, props.todolist.id))\r\n                };\r\n                let changeStatus = (event: ChangeEvent<HTMLInputElement>) => {\r\n                    let newCheckBoxValue = event.currentTarget.checked\r\n                    dispatch(changeTaskStatusAC(task.id, newCheckBoxValue, props.todolist.id))\r\n                };\r\n                let changeTaskTitle = (newTitle: string) => {\r\n                    dispatch(changeTaskTitleAC(task.id, newTitle, props.todolist.id))\r\n                }\r\n\r\n                return (\r\n                    <div key={task.id} className={task.isDone ? 'is_done' : ''}>\r\n                        <Checkbox\r\n                            color={'primary'}\r\n                            checked={task.isDone}\r\n                            onChange={changeStatus}\r\n                        />\r\n                        <EditableSpan title={task.title} saveNewTitle={changeTaskTitle}/>\r\n                        <IconButton onClick={removeTask}>\r\n                            <CancelIcon/>\r\n                        </IconButton>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n        <div>\r\n            <Button variant={props.todolist.filter === 'all' ? 'contained' : 'outlined'}\r\n                    color={props.todolist.filter === 'all' ? 'default' : 'primary'}\r\n                    onClick={onAllClickHandler}>All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'contained' : 'outlined'}\r\n                    color={props.todolist.filter === 'active' ? 'default' : 'primary'}\r\n                    onClick={onActiveClickHandler}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'contained' : 'outlined'}\r\n                    color={props.todolist.filter === 'completed' ? 'default' : 'primary'}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n}\r\n","import {FilterValuesType, TodoListType} from \"../AppWithRedux\";\nimport {v1} from \"uuid\";\n\nconst REMOVE_TODOLIST = 'REMOVE_TODOLIST'\nconst ADD_TODOLIST = 'ADD_TODOLIST'\nconst CHANGE_TODOLIST_TITLE = 'CHANGE_TODOLIST_TITLE'\nconst CHANGE_TODOLIST_FILTER = 'CHANGE_TODOLIST_FILTER'\n\nexport type RemoveTodolistActionType = {\n    type: 'REMOVE_TODOLIST'\n    id: string\n}\n\nexport type AddTodolistActionType = {\n    type: 'ADD_TODOLIST'\n    title: string\n    todolistId: string\n}\n\nexport type ChangeTodolistTitleActionType = {\n    type: 'CHANGE_TODOLIST_TITLE'\n    id: string\n    title: string\n}\n\nexport type ChangeTodolistFilterActionType = {\n    type: 'CHANGE_TODOLIST_FILTER'\n    id: string\n    filter: FilterValuesType\n}\n\ntype ActionsTypes = RemoveTodolistActionType |\n    AddTodolistActionType |\n    ChangeTodolistTitleActionType |\n    ChangeTodolistFilterActionType\n\n\nconst InitialState: Array<TodoListType> = []\n\nexport const todoListsReducer = (state: Array<TodoListType> = InitialState, action: ActionsTypes) => {\n    switch (action.type) {\n        case REMOVE_TODOLIST:\n            return state.filter(todo => todo.id !== action.id)\n        //не используем спред ...state т.к. метод .фильтр создает новый массив(не мутирует старый)\n        case ADD_TODOLIST:\n            const newTodoList: TodoListType = {\n                id: action.todolistId,\n                title: action.title,\n                filter: \"all\"\n            }\n            return [newTodoList, ...state]\n        case CHANGE_TODOLIST_TITLE:\n            // const newTodoListTitle = state.find(todo => todo.id === action.id)\n            // if (newTodoListTitle) {\n            //     newTodoListTitle.title = action.title\n            // }\n            // return ([...state])\n            return state.map(todo => todo.id === action.id ? {...todo, title: action.title} : todo)\n        case CHANGE_TODOLIST_FILTER:\n            return state.map(todo => todo.id === action.id ? {...todo, filter: action.filter} : todo)\n        default:\n            return state\n    }\n}\n\nexport const removeTodoListAC = (todoListId: string): RemoveTodolistActionType => {\n    return {type: 'REMOVE_TODOLIST', id: todoListId}\n}\n\nexport const addTodoListAC = (newTodolistTitle: string): AddTodolistActionType => {\n    return {type: 'ADD_TODOLIST', title: newTodolistTitle, todolistId: v1()}\n}\n\nexport const changeTodolistTitleAC = (todoListId: string, newTodolistTitle: string): ChangeTodolistTitleActionType => {\n    return {type: 'CHANGE_TODOLIST_TITLE', id: todoListId, title: newTodolistTitle}\n}\n\nexport const changeTodolistFilterAC = (todoListId: string, newFilter: FilterValuesType): ChangeTodolistFilterActionType => {\n    return {type: 'CHANGE_TODOLIST_FILTER', id: todoListId, filter: newFilter}\n}","import React, {useReducer} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC, tasksReducer} from \"./state/tasks-reducer\";\r\nimport {addTodoListAC, changeTodolistFilterAC, changeTodolistTitleAC, removeTodoListAC, todoListsReducer} from \"./state/todolists-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction AppWithRedux() {\r\n    const dispatch = useDispatch()\r\n    const todoLists = useSelector<AppRootStateType, Array<TodoListType>>(state => state.todoLists)\r\n\r\n    function changeTodoListTitle(todoListID: string, newTitle: string) {\r\n        dispatch(changeTodolistTitleAC(todoListID, newTitle))\r\n    }\r\n\r\n    function changeTodolistFilter( todoListID: string, newFilterValue: FilterValuesType) {\r\n        dispatch(changeTodolistFilterAC(todoListID, newFilterValue))\r\n    }\r\n\r\n    function removeTodoList(todoListID: string) {\r\n        const action = removeTodoListAC(todoListID)\r\n        dispatch(action)\r\n\r\n    }\r\n\r\n    function addTodoList(title: string) {\r\n        dispatch(addTodoListAC(title))\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px'}}><AddItemForm addItem={addTodoList}/></Grid>\r\n                <Grid container spacing={5}>{\r\n                    todoLists.map(tl => {\r\n                        return (\r\n                            <Grid item>\r\n                                <Paper style={{padding: '20px'}} elevation={6}>\r\n                                    <Todolist\r\n                                        todolist={tl}\r\n                                        key={tl.id}\r\n                                        changeTodolistFilter={changeTodolistFilter}\r\n                                        changeTodoListTitle={changeTodoListTitle}\r\n                                        removeTodoList={removeTodoList}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        )\r\n                    })\r\n                }</Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers, createStore} from \"redux\";\nimport {todoListsReducer} from \"./todolists-reducer\";\nimport {tasksReducer} from \"./tasks-reducer\";\n// объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\nconst rootReducer = combineReducers({\n    todoLists: todoListsReducer,\n    tasks: tasksReducer\n})\n// непосредственно создаём store\nexport const store = createStore(rootReducer);\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport AppWithRedux from './AppWithRedux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}